name: GenerteRelease

on:
  push:
    tags:        
      - "v*.*.*"

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Avalonia.One.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Wap_Project_Directory: output    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: One.Toolbox.Desktop/One.Toolbox.Desktop.csproj                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
     # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
    # D:\a\Avalonia.One\Avalonia.One\output\AppPackages\
      run:  dotnet publish $env:Wap_Project_Path -c Release --output ${{ env.Wap_Project_Directory }}\AppPackages
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

  
    #- name: Upload build artifacts
    #  uses: actions/upload-artifact@v4
    #  with:
    #   name: One.Toolbox_${{ github.ref_name }}
    #   path: |
    #    ${{ env.Wap_Project_Directory }}\AppPackages
    #    !${{ env.Wap_Project_Directory }}\AppPackages\*.pdb
    - name: Zip the Build
      uses: thedoctor0/zip-release@0.7.6
      with:
        type: '7z'
        filename: 'One.Toolbox_${{ github.ref_name }}.zip'
        path : ${{ env.Wap_Project_Directory }}\AppPackages
        exclusions: '*.pdb'
        recursive_exclusions: '*.pdb'
    
    - name: Get previous tag
      id: prev-tag
      shell: bash
      run: |
        PREV_TAG=$(git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1`)
        echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release-notes
      run: |
        if [ -z "${{ steps.prev-tag.outputs.prev_tag }}" ]; then
          RELEASE_NOTES=$(git log --pretty=format:"- %s" HEAD)
        else
          RELEASE_NOTES=$(git log ${{ steps.prev-tag.outputs.prev_tag }}..HEAD --pretty=format:"- %s")
        fi
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      shell: bash

    - name: Release
      uses: ncipollo/release-action@v1
      with:
        body: ${{ steps.release-notes.outputs.release_notes }}
        artifacts: "One.Toolbox_${{ github.ref_name }}.zip"

         
              
